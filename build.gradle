import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

plugins {
    id 'java'
    id "org.jetbrains.intellij" version "1.16.1"
}

group 'pl.tigersoft.intellij'
version '1.3.0'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

def encoding = 'UTF-8'
def vendor = 'TigerSoft'

compileJava.options.encoding = encoding
compileTestJava.options.encoding = encoding

dependencies {
    implementation("org.apache.commons:commons-lang3:${commonsLang3Version}")
    implementation("net.datafaker:datafaker:${fakerVersion}")

    testImplementation("org.assertj:assertj-core:${assertjCoreVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = ideaVersion
    type = ideaType
}

//patchPluginXml {
//    changeNotes.set(provider { "${file('changes.html').getText(encoding)}")
//    pluginDescription "${file('description.html').getText(encoding)}"
//            .replace("RELEASE_DATETIME", buildTime())
//    sinceBuild '212.*'
//    untilBuild '253.*'
//}
//publishPlugin {
//    channels 'alpha'
//    token System.getenv("ORG_GRADLE_PROJECT_intellijPublishToken")
//}

runPluginVerifier {
    ideVersions = [
            // https://data.services.jetbrains.com/products?code=DG%2CPS%2CDL%2CMPS%2CMPSIIP%2CRDCPPP%2CWS%2CAC%2CIIC%2CIIE%2CGO%2CCL%2CPCD%2CPCC%2CRD%2CPCE%2CIIU%2CRM%2CPCP&fields=code%2Cname%2Creleases.downloads%2Creleases.version%2Creleases.build%2Creleases.type
//            ideaVerifier_2023_1_1,
//            ideaVerifier_2023_2_5,
            ideaVerifier_2023_3_2,
    ]
    verifierPath = "pluginVerifierBin/verifier-all.jar"
}

// TODO - failing build if uncommented
//jar {
//    manifest {
//        attributes(
//                'Manifest-Version': '1.0',
//                'Name': project.name,
//                'Specification-Title': project.name,
//                'Specification-Vendor': vendor,
//                'Specification-Version': project.version,
//                'Implementation-Title': project.name,
//                'Implementation-Vendor': vendor,
//                'Implementation-Version': getGitHash(),
//                'Build-Date': buildTime()
//        )
//    }
//}

def static buildTime() {
    def dateTime = LocalDateTime.now(ZoneId.of('UTC'));
    def formatter = DateTimeFormatter.ofPattern('yyyyMMdd.HHmmss')
    return dateTime.format(formatter)
}

def static getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
